openapi: 3.0.0
info:
  title: annotation-competition-api
  version: '1.0'
servers:
  - url: 'https://annotation-competition.herokuapp.com'
paths:
  /auth:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  status:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      provider:
                        type: string
                        minLength: 1
                      uid:
                        type: string
                        minLength: 1
                      allow_password_change:
                        type: boolean
                      name: {}
                      nickname: {}
                      image: {}
                      email:
                        type: string
                        minLength: 1
                      created_at:
                        type: string
                        minLength: 1
                      updated_at:
                        type: string
                        minLength: 1
                    required:
                      - id
                      - provider
                      - uid
                      - allow_password_change
                      - email
                      - created_at
                      - updated_at
                required:
                  - status
                  - data
              examples:
                example:
                  value:
                    status: success
                    data:
                      id: 1
                      provider: email
                      uid: example@example.com
                      allow_password_change: false
                      name: null
                      nickname: null
                      image: null
                      email: example@example.com
                      created_at: '2000-01-01T01:30:08.421Z'
                      updated_at: '2000-01-01T01:30:08.490Z'
            application/javascript:
              schema:
                type: object
                properties: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                userName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  maxLength: 20
                  format: password
              required:
                - userId
                - userName
                - email
                - password
            examples:
              example-1:
                value:
                  userId: string
                  userName: string
                  email: user@example.com
                  password: pa$$word
          application/javascript:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: Post the necessary fields for the API to create a new user.
      description: ユーザーを登録
    parameters: []
  /auth/sign_in:
    post:
      summary: ''
      operationId: post-user-login
      responses:
        '200':
          description: OK
          headers:
            access-token:
              schema:
                type: string
            client:
              schema:
                type: string
            uid:
              schema:
                type: string
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        minLength: 1
                      uid:
                        type: string
                        minLength: 1
                      id:
                        type: number
                      provider:
                        type: string
                        minLength: 1
                      allow_password_change:
                        type: boolean
                      name: {}
                      nickname: {}
                      image: {}
                    required:
                      - email
                      - uid
                      - id
                      - provider
                      - allow_password_change
                required:
                  - data
              examples:
                example:
                  value:
                    data:
                      email: example@example.com
                      uid: example@example.com
                      id: 1
                      provider: email
                      allow_password_change: false
                      name: null
                      nickname: null
                      image: null
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
                  format: password
      description: ログイン操作を実施し，アクセストークンを取得
    parameters: []
  /leader_board:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                        userName:
                          type: string
                        annotationCount:
                          type: string
                        rank:
                          type: integer
              examples:
                example:
                  value:
                    users:
                      - userId: string
                        userName: string
                        annotationCount: string
                        rank: 1
        '500':
          description: Internal Server Error
      operationId: get-leader_board
      parameters:
        - schema:
            type: string
          in: header
          name: 'access-token: <access-token>'
          description: sign_inへのアクセス時headerで返却されたaccess-token
        - schema:
            type: string
          in: header
          name: 'client: <client>'
          description: sign_inへのアクセス時headerで返却されたclient
        - schema:
            type: string
          in: header
          name: 'uid: <uid>'
          description: sign_inへのアクセス時headerで返却されたuid
      description: アノテーションコンペティションのリーダーボードの情報を取得（認証が必要）
  /competition/next:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  competitionId:
                    type: string
                    minLength: 1
                  competitionName:
                    type: string
                    minLength: 1
                  startAt:
                    type: string
                    minLength: 1
                  endAt:
                    type: string
                    minLength: 1
                  isRunning:
                    type: boolean
                required:
                  - competitionId
                  - competitionName
                  - startAt
                  - endAt
                  - isRunning
              examples:
                example:
                  value:
                    competitionId: string
                    competitionName: string
                    startAt: string
                    endAt: string
                    isRunning: true
        '500':
          description: Internal Server Error
      operationId: get-competition-next
      description: 開催中，もしくは次のコンペティションの情報を取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'access-token: <access-token>'
          description: sign_inへのアクセス時headerで返却されたaccess-token
        - schema:
            type: string
          in: header
          name: 'client: <client>'
          description: sign_inへのアクセス時headerで返却されたclient
        - schema:
            type: string
          in: header
          name: 'uid: <uid>'
          description: sign_inへのアクセス時headerで返却されたuid
  /competition/assignment:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  competitionId:
                    type: string
                    minLength: 1
                  images:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        assignmentId:
                          type: string
                          minLength: 1
                        imageUrl:
                          type: string
                          format: uri
                      required:
                        - assignmentId
                required:
                  - competitionId
                  - images
              examples:
                example:
                  value:
                    competitionId: string
                    images:
                      - assignmentId: string
                        imageUrl: 'http://example.com'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      operationId: get-competition-assignment
      description: アノテーションする画像などの情報を取得(認証が必要)
      parameters:
        - schema:
            type: string
          in: header
          name: 'access-token: <access-token>'
          description: sign_inへのアクセス時headerで返却されたaccess-token
        - schema:
            type: string
          in: header
          name: 'client: <client>'
          description: sign_inへのアクセス時headerで返却されたclient
        - schema:
            type: string
          in: header
          name: 'uid: <uid>'
          description: sign_inへのアクセス時headerで返却されたuid
    post:
      summary: ''
      operationId: post-competition-assignment
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: アノテーション結果を送信（認証が必要）
      parameters:
        - schema:
            type: string
          in: header
          name: 'access-token: <access-token>'
          description: sign_inへのアクセス時headerで返却されたaccess-token
        - schema:
            type: string
          in: header
          name: 'client: <client>'
          description: sign_inへのアクセス時headerで返却されたclient
        - schema:
            type: string
          in: header
          name: 'uid: <uid>'
          description: sign_inへのアクセス時headerで返却されたuid
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                competitionId:
                  type: string
                  minLength: 1
                annotations:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      assignmentId:
                        type: string
                        minLength: 1
                      annotation:
                        type: string
                        minLength: 1
                    required:
                      - assignmentId
                      - annotation
              required:
                - competitionId
                - annotations
            examples:
              example:
                value:
                  competitionId: string
                  annotations:
                    - assignmentId: string
                      annotation: string
components:
  schemas: {}
